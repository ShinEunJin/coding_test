220722 1. 백준_실버2_11053_가장 긴 증가하는 부분 수열

유명한 문제다.
[40, 10, 60, 20, 20, 5, 30, 20, 50]
[1, 1, 1, 1, 1, 1, 1, 1, 1] <- check 배열
60은 40보다 크니까 2가 된다. 그리고 10보다도 크지만 60의 체크배열값은
10의 체크배열값 1에서 1을 더한 값 2와 같다. 즉, 굳이 값을 올릴필요가 없다는거다.

```
      function solution(n, arr) {
        let check = Array.from({ length: n }, () => 1);

        for (let i = 0; i < n; i++) {
          let tmp = check[i];
          for (let j = 0; j <= i; j++) {
            if (arr[j] < arr[i] && check[j] + 1 > tmp) {
              tmp = check[j] + 1;
            }
          }
          check[i] = tmp;
        }

        return Math.max(...check);
      }
```

220729 2. 백준_실버3_1003_피보나치 함수

피보나치 문제. 웬만하면 반복문을 쓰는 상향식이 재귀를 쓰는 하향식보다 좋다.
여기서는 문제 특성상 다이나믹 + 하향식 으로 풀었다. 물론 상향식으로도 풀수있지만
직관적으로 전자가 좋다.

```
        function fibonacci(num) {
          if (num === 0) {
            answer[0]++;
            return 0;
          }
          if (num === 1) {
            answer[1]++;
            return 1;
          }
          if (check[num]) return check[num];
          else {
            return (check[num] = fibonacci(num - 2) + fibonacci(num - 1));
          }
        }

        fibonacci(len);
        console.log(check);
        for (let x of testcase) {
          console.log(check[x - 1], check[x]);
        }
      }
```

220821 3. 프로그래머스_2_배달

```
      function solution(N, road, K) {
        let graph = Array.from({ length: N + 1 }, () => Array());
        let check = Array.from({ length: N + 1 }, () => 10001);

        for (let x of road) {
          graph[x[0]].push([x[1], x[2]]);
          graph[x[1]].push([x[0], x[2]]);
        }

        let queue = [[1, 0]];
        check[1] = 0;
        while (queue.length) {
          let [v, t] = queue.shift();
          for (let [nv, nt] of graph[v]) {
            if (check[nv] > check[v] + nt) {
              check[nv] = check[v] + nt;
              queue.push([nv, nt]);
            }
          }
        }

        return check;
      }
```