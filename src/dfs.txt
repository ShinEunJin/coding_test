220724 1. 백준_실버1_14888_연산자 끼워넣기

백트랙킹 재귀 문제. 내가 지금까지 공부한 백트래킹에서 확장된 개념을 사용해야 해서 어려웠다.
ex) oper = [2, 1, 1, 1]이 주어지면 for문을 돌면서 oper의 인덱스 값을 감소시키고 다시 재귀하면서
인덱스 값을 돌리는 전형적인 백트랙킹을 써야한다.

재귀 문제에서 정말 중요한 것.
L, sum 은 재귀함수 파라미터로 전달해주고 있지만 oper은 재귀함수 밖에서 돌아가고 있기 때문에
oper[i]++ 처럼 다시 값을 돌려줘야 한다.
만약 sum을 파라미터로 넣지 않는다면 재귀함수 안에
let priorSum = sum 이전 값을 초기화 해주고
oper[i]++ 와 함께 값을 복구시키기 위해 sum = priorSum을 해줘야 한다.
그냥 파라미터로 넣어주는게 편하다.

```
      function solution(n, nums, oper) {
        let answer = [];

        function search(L, sum) {
          if (L === n - 1) answer.push(sum);
          else {
            for (let i = 0; i < 4; i++) {
              if (oper[i] > 0) {
                oper[i]--;
                if (i === 0) search(L + 1, sum + nums[L + 1]);
                if (i === 1) search(L + 1, sum - nums[L + 1]);
                if (i === 2) search(L + 1, sum * nums[L + 1]);
                if (i === 3) search(L + 1, parseInt(sum / nums[L + 1]));
                oper[i]++;
              }
            }
          }
        }

        search(0, nums[0]);

        return [Math.max(...answer), Math.min(...answer)];
      }
```

220809 2. 백준_골드5_1038_감소하는 수

감소하는 수의 최댓값이 9876543210 이란것을 알면 쉽게는 아니지만 암튼 풀 수 있는 문제다.
큰 특징은 없지만 백트랙킹 + 조합 을 공부 할 수 있는 좋은 문제다.

```
      function solution(n) {
        let answer = [];
        let check = Array.from({ length: 10 }, () => 0);
        let tmp = [];
        function DFS(L, s, t) {
          if (L === t) answer.push(Number(tmp.join("").slice()));
          else {
            for (let i = s; i >= 0; i--) {
              tmp[L] = i;
              DFS(L + 1, i - 1, t);
              tmp[L] = "";
            }
          }
        }

        for (let i = 10; i >= 1; i--) {
          DFS(0, 9, i);
        }
        
        return answer[answer.length - n - 1];
      }
```

220810 3. 백준_골드5_1068_트리

트리 문제. 어려웠다. 예외 제거가 어렵다. if (tree[L].length === 1) cnt++ 이것은
무조건 target이 n 이하로 주워졌을 때만 작동된다.

```
      function solution(n, arr, target) {
        let tree = [];
        let cnt = 0;
        let start = 0;

        for (let i = 0; i < arr.length; i++) {
          if (arr[i] === -1) start = i;
          else tree[arr[i]] = tree[arr[i]] ? [...tree[arr[i]], i] : [i];
        }

        function DFS(L) {
          if (L === target) return;
          if (tree[L]) {
            for (let i of tree[L]) {
              if (tree[L].length === 1) cnt++;
              else DFS(i);
            }
          } else {
            cnt++;
          }
        }

        DFS(start);

        return cnt;
      }
```

220817 4. 프로그래머스_2_조이스틱

```
      function solution(name) {
        const alphabet = {
          "생략"
        };

        let answer = [];
        let check = "A".repeat(name.length);

        function search(i, cnt, name) {
          cnt += alphabet[name[i]];
          name = name.slice(0, i) + "A" + name.slice(i + 1);
          if (name === check) return answer.push(cnt);
          let left = i;
          let right = i;
          let stop = 0;
          while (stop < 2) {
            cnt++;
            left--;
            right++;
            if (left < 0) left = name.length + left;
            if (right > name.length - 1) right = right - name.length;
            if (name[right] && name[right] !== "A") {
              search(right, cnt, name);
              stop++;
            }
            if (name[left] && name[left] !== "A") {
              search(left, cnt, name);
              stop++;
            }
          }
        }

        search(0, 0, name);

        return Math.min(...answer);
      }
```