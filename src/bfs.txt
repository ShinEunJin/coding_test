220727 1. 백준_실버1_1697_숨바꼭질

bfs 전형적인 문제. bfs 에서 어떻게 level 단계를 넣는지 알 수 있는 문제다.
그리고 체크배열함수를 통해서 반복을 없애줘서 효율성을 높인다.

```
      function solution(n, k) {
        let check = Array.from({ length: 10 ** 5 + 1 }, () => 0);
        let queue = [[n, 0]];

        while (queue.length) {
          const [v, i] = queue.shift();
          if (v === k) return i;
          for (let nv of [v * 2, v + 1, v - 1]) {
            if (!check[nv] && 0 <= nv && nv <= 10 ** 5) {
              check[nv] = 1;
              queue.push([nv, i + 1]);
            }
          }
        }
      }
```

220808 2. 프로그래머스_2_게임 맵 최단거리

미로 탐색. dfs를 사용하면 시간초과되서 최단 거리 문제는 bfs로 풀어야한다.

```
      function solution(maps) {
        let answer = 1;
        let queue = [[0, 0]];

        while (queue.length) {
          let len = queue.length;
          for (let i = 0; i < len; i++) {
            let [x, y] = queue.shift();
            let dict = [
              [x + 1, y],
              [x - 1, y],
              [x, y - 1],
              [x, y + 1],
            ];
            if (x === maps.length - 1 && y === maps[0].length - 1)
              return answer;
            for (let [nx, ny] of dict) {
              if (
                0 <= nx &&
                nx < maps.length &&
                0 <= ny &&
                ny < maps[0].length &&
                maps[nx][ny] === 1
              ) {
                maps[nx][ny] = 0;
                queue.push([nx, ny]);
              }
            }
          }
          answer++;
        }

        return -1;
      }
```

처음에는 위 처럼 풀었다. bfs에서 queue를 한번 순회할때마다 
끝에서 answer++로 증가치를 주는 방식인데
이렇게 하는 방법보다 queue에 인덱스 배열 요소로 cnt를 주는것이 더 가독성이 좋다.

```
      function solution(maps) {
        let queue = [[0, 0, 1]];
        let row = maps.length;
        let col = maps[0].length;

        while (queue.length) {
          let [y, x, cnt] = queue.shift();
          if (y === row - 1 && x === col - 1) return cnt;
          let dict = [
            [y + 1, x],
            [y - 1, x],
            [y, x - 1],
            [y, x + 1],
          ];
          for (let [ny, nx] of dict) {
            if (
              0 <= nx &&
              nx < col &&
              0 <= ny &&
              ny < row &&
              maps[ny][nx] === 1
            ) {
              maps[ny][nx] = 0;
              queue.push([ny, nx, cnt + 1]);
            }
          }
        }

        return -1;
      }
```

최종 정리 코드. queue 인덱스 마지막 요소로 cnt를 줘서 가독성이 좋아졌다.
그리고 문제 풀때 주의할 점이 있다. row 와 col 이 많이 헷갈릴 수 있다.
y축은 row, x축은 col과 연관있고 헷갈린다면 col을 중심으로 생각하면 편하다.

220813 3. 백준_실버2_1260_DFS와 BFS

dfs와 bfs의 기본을 담은 문제. 처음에는 2차원 배열을 만들었는데 인접리스트를 사용하는게 훨씬 좋다.
주의할점은 양방향이기 때문에 graph[a].push(b) 와 graph[b].push(a)를 같이 해줘야한다.
인접리스트 배열로 dfs와 bfs를 모두 연습할 수 있는 좋은 문제다.

```
      function solution(n, m, v, arr) {
        let graph = Array.from({ length: n + 1 }, () => Array());
        for (let [a, b] of arr) {
          graph[a].push(b);
          graph[b].push(a);
        }

        function DFS(start) {
          let path = [start];
          function search(L) {
            for (let val of graph[L].sort((a, b) => a - b)) {
              if (!path.includes(val)) {
                path.push(val);
                search(val);
              }
            }
          }
          search(start);
          return path;
        }

        function BFS(start) {
          let queue = [start];
          let path = [start];
          while (queue.length) {
            let val = queue.shift();
            for (let nv of graph[val].sort((a, b) => a - b)) {
              if (!path.includes(nv)) {
                path.push(nv);
                queue.push(nv);
              }
            }
          }
          return path;
        }

        console.log(DFS(v), BFS(v));
      }
```

220727 4. 백준_골드5_7576_토마토

이 bfs문제에서 알아야 할게 있다. 시작점이 여러개인것과 -1로 덮여있는 0을 마지막에 체크해야 하는것
그리고 마지막으로 queue.shift의 시간 문제다.

첫번째 시작점이 여러개인 것은 그냥 이중for문으로 queue에 넣어주면 된다.
두번째 0체크도 그냥 이중for문으로 해결
(문제 범위를 보면 이중for문시 최대 1,000,000의 경우의수가 있는데 이정도는 js도 그냥 돌릴 수 있다.)

세번째 queue.shift 사용시 시간 초과 문제를 떠서 고생을 했다.
일단 알아야 할게 범위가 백만단위가 되면 shift 쓰기가 애매할 때가 있다는 걸 인지해야 한다.

문제를 보면 굳이 queue에서 shift를 사용할 필요가 없고 계속 queue에 쌓아줘도 문제 없다.
t = 0을 설정하고 한번 탐색할 때마다 t++ 그리고 t가 queue.length를 넘으면 중지시켜 주면 된다.

확실히 shift를 사용하면 O(n)의 복잡도를 가지니까 위의 방법을 쓰자.(때에 따라)

```
      function solution(m, n, farm) {
        let answer = 0;

        let queue = [];
        for (let i = 0; i < n; i++) {
          for (let j = 0; j < m; j++) {
            if (farm[i][j] === 1) queue.push([i, j, 0]);
          }
        }

        const dy = [-1, 0, 1, 0];
        const dx = [0, -1, 0, 1];

        let t = 0;
        while (t < queue.length) {
          let [y, x, cnt] = queue[t++];
          answer = cnt;
          for (let k = 0; k < 4; k++) {
            const py = y + dy[k];
            const px = x + dx[k];
            if (0 <= py && py < n && 0 <= px && px < m && farm[py][px] === 0) {
              queue.push([py, px, cnt + 1]);
              farm[py][px] = 1;
            }
          }
        }

        for (let i = 0; i < n; i++) {
          for (let j = 0; j < m; j++) {
            if (farm[i][j] === 0) return -1;
          }
        }

        return answer;
      }
```