220725 1. 리트코드_31_Next Permutation

배열이 주어지면 다음 수열(사전순)이 무엇인지 판단하는 문제다. 어려웠다. 규칙을 찾아야하는데 찾기 힘들었고
파라미터로 받은 배열을 유지해야해서 직접 정렬을 해줬다.
재귀함수를 쓰지 않고 순열을 구할 수 있는 방법이다.(물론 조합도 가능하다고 한다.)
하지만 nPm 처럼 특정 m 수 만큼 구하지는 못하고 전체 배열만을 사용해야 한다. 하지만 속도는 빠르다.

방법: ex) [2, 7, 1, 5, 4]
1) 맨오른쪽 i 부터 시작해서 왼쪽으로 arr[i - 1] < arr[i] 인 값을 찾는다. i는 2 (arr[2] < arr[3])
2) 해당 i 인덱스값 보다 바로 다음으로 큰 수(arr[j])를 i 기준으로 오른쪽에서 찾아서 바꾼다.
   i = 2, arr[i] = 1, i 오른쪽 즉, [5, 4] 중에 1 바로 다음으로 큰 수는 4 그래서 1과 4를 교체 [2, 7, 4, 5, 1]
3) 마지막으로 i 오른쪽 배열들을 오름차순으로 정렬해주면 된다.
   i = 2, 그러면 오른쪽 인덱스들 3, 4를 정렬하면된다. [5, 1] => [1, 5] 그러면 최종적으로 [2, 7, 4, 1, 5]가 나온다.

```
      function solution(nums) {
        function sorting(arr, start) {
          for (let i = start; i < arr.length; i++) {
            for (let j = i + 1; j < arr.length; j++) {
              if (arr[i] > arr[j]) [arr[i], arr[j]] = [arr[j], arr[i]];
            }
          }
          return arr;
        }

        for (let i = nums.length - 1; i > 0; i--) {
          if (nums[i - 1] < nums[i]) {
            let beChanged = Number.MAX_SAFE_INTEGER;
            let beChangedIndex = 0;
            for (j = i; j < nums.length; j++) {
              if (nums[i - 1] < nums[j] && nums[j] < beChanged) {
                beChanged = nums[j];
                beChangedIndex = j;
              }
            }
            [nums[i - 1], nums[beChangedIndex]] = [
              nums[beChangedIndex],
              nums[i - 1],
            ];
            return sorting(nums, i);
          }
        }
        nums.reverse();
      }
```